// Generated by CoffeeScript 2.2.4
(function() {
  var Promise, _, compareYears, format_number, get_public_ips, ip, log, parser, path_resolver, random_string, validate_email, xml_to_object;

  ip = require('ip');

  _ = require('lodash');

  Promise = require('bluebird');

  log = function(text = '', type = 'info') {
    var d;
    if (type === 'info' || (type === 'debug' && process.env.DEBUG === 'true') || (type === 'debug' && process.env.NODE_ENV === 'development')) {
      d = new Date();
      return console.log(`[${String(d.getUTCFullYear())}-${"0".concat(String(d.getUTCMonth() + 1)).substr(-2)}-${"0".concat(String(d.getUTCDate())).substr(-2)} ${"0".concat(String(d.getUTCHours())).substr(-2)}:${"0".concat(String(d.getUTCMinutes())).substr(-2)}:${"0".concat(String(d.getUTCSeconds())).substr(-2)}] [${type.toUpperCase()}]: ${text}`);
    }
  };

  format_number = function(number, decimals = 0, thousand_separator = '.', decimal_separator = ',', currency_symbol = '') {
    var i, j, sign;
    sign = number < 0 ? '-' : '';
    i = `${parseInt(number = Math.abs(+number || 0).toFixed(decimals))}${''}`;
    j = ((j = i.length) > 3 ? j % 3 : 0);
    return `${sign}${currency_symbol}${(j ? `${i.substr(0, j)}${thousand_separator}` : '')}${i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousand_separator)}${(decimals ? `${decimal_separator}${Math.abs(number - i).toFixed(decimals).slice(2)}` : '')}`;
  };

  get_public_ips = function(ips = []) {
    return _.filter(ips, function(_ip) {
      return !ip.isPrivate(_ip);
    });
  };

  path_resolver = function(root, path, method) {
    return `${root}${path}/${method}`;
  };

  random_string = function() {
    var i, possible, text;
    text = "";
    possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    i = 0;
    while (i < 8) {
      text += possible.charAt(Math.floor(Math.random() * possible.length));
      i++;
    }
    return text;
  };

  validate_email = function(email) {
    return new Promise(function(resolve, reject) {
      if (/^[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(email)) {
        return resolve(email.trim().toLowerCase());
      } else {
        return reject('failed');
      }
    });
  };

  xml_to_object = function(xml) {
    var attribute, i, item, j, nodeName, obj, old;
    // Create the return object
    obj = {};
    if (xml.nodeType === 1) {
      // element
      // do attributes
      if (xml.attributes.length > 0) {
        obj['@attributes'] = {};
        j = 0;
        while (j < xml.attributes.length) {
          attribute = xml.attributes.item(j);
          obj['@attributes'][attribute.nodeName] = attribute.nodeValue;
          j++;
        }
      }
    } else if (xml.nodeType === 3) {
      // text
      obj = xml.nodeValue;
    }
    // do children
    // If just one text node inside
    if (xml.hasChildNodes() && xml.childNodes.length === 1 && xml.childNodes[0].nodeType === 3) {
      obj = xml.childNodes[0].nodeValue;
    } else if (xml.hasChildNodes()) {
      i = 0;
      while (i < xml.childNodes.length) {
        item = xml.childNodes.item(i);
        nodeName = item.nodeName;
        if (typeof obj[nodeName] === 'undefined') {
          obj[nodeName] = xmlToJson(item);
        } else {
          if (typeof obj[nodeName].push === 'undefined') {
            old = obj[nodeName];
            obj[nodeName] = [];
            obj[nodeName].push(old);
          }
          obj[nodeName].push(xmlToJson(item));
        }
        i++;
      }
    }
    return obj;
  };

  compareYears = function(years) {
    return function(playlist) {
      return parseInt(years) >= parseInt(_.get(playlist, 'data.custom.years-category', 0));
    };
  };

  parser = function(playlist) {
    return {
      key: `CN_PLAYLISTS_${_.get(playlist, 'data.custom.years-category', 0)}`,
      value: _.get(playlist, 'data.custom.years-category', 0)
    };
  };

  exports.log = log;

  exports.format_number = format_number;

  exports.get_public_ips = get_public_ips;

  exports.path_resolver = path_resolver;

  exports.xml_to_object = xml_to_object;

  exports.random_string = random_string;

  exports.validate_email = validate_email;

  exports.compareYears = compareYears;

  exports.parser = parser;

}).call(this);
